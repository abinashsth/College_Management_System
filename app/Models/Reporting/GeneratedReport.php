<?php

namespace App\Models\Reporting;

use App\Models\User;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;

class GeneratedReport extends Model
{
    use HasFactory;

    /**
     * The attributes that are mass assignable.
     *
     * @var array<int, string>
     */
    protected $fillable = [
        'report_template_id',
        'title',
        'parameters_used',
        'filters_applied',
        'report_date',
        'report_data',
        'summary',
        'file_path',
        'file_type',
        'generated_by',
        'generated_at',
    ];

    /**
     * The attributes that should be cast.
     *
     * @var array<string, string>
     */
    protected $casts = [
        'parameters_used' => 'json',
        'filters_applied' => 'json',
        'report_date' => 'date',
        'report_data' => 'json',
        'generated_at' => 'datetime',
    ];

    /**
     * Get the report template that this report was generated from.
     */
    public function template(): BelongsTo
    {
        return $this->belongsTo(ReportTemplate::class, 'report_template_id');
    }

    /**
     * Get the user who generated this report.
     */
    public function generator(): BelongsTo
    {
        return $this->belongsTo(User::class, 'generated_by');
    }

    /**
     * Scope a query to only include reports of a specific type.
     *
     * @param  \Illuminate\Database\Eloquent\Builder  $query
     * @param  string  $type
     * @return \Illuminate\Database\Eloquent\Builder
     */
    public function scopeOfType($query, $type)
    {
        return $query->whereHas('template', function ($q) use ($type) {
            $q->where('report_type', $type);
        });
    }

    /**
     * Scope a query to only include reports generated by a specific user.
     *
     * @param  \Illuminate\Database\Eloquent\Builder  $query
     * @param  int  $userId
     * @return \Illuminate\Database\Eloquent\Builder
     */
    public function scopeGeneratedBy($query, $userId)
    {
        return $query->where('generated_by', $userId);
    }

    /**
     * Scope a query to only include reports generated in a date range.
     *
     * @param  \Illuminate\Database\Eloquent\Builder  $query
     * @param  string  $startDate
     * @param  string  $endDate
     * @return \Illuminate\Database\Eloquent\Builder
     */
    public function scopeGeneratedBetween($query, $startDate, $endDate)
    {
        return $query->whereBetween('generated_at', [$startDate, $endDate]);
    }

    /**
     * Scope a query to only include reports for a specific report date.
     *
     * @param  \Illuminate\Database\Eloquent\Builder  $query
     * @param  string  $date
     * @return \Illuminate\Database\Eloquent\Builder
     */
    public function scopeForReportDate($query, $date)
    {
        return $query->where('report_date', $date);
    }
} 